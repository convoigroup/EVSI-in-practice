recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
## For primary and secondary outcomes.
model.dat.full<-function(){
## Data
X.SE[1] ~ dbin(pi[1], n)
X.SE[2] ~ dbin(pi[2], n)
X.N.hosp ~ dbinom(gamma.hosp, X.SE[1]+X.SE[2])
X.N.dead ~ dbin(gamma.dead, X.N.hosp)
# Secondary Outcomes on Recovery
# Probability to rate
recover.amb <- -log(1-lambda.amb.rec.TH)
recover.hosp <- -log(1-lambda.hosp.rec.TH)
for(i in 1:N.amb){
T.rec.amb[i] ~ dexp(recover.amb)
}
for(i in 1:N.hosp){
T.rec.hosp[i] ~ dexp(recover.hosp)
}
##Priors
## Side effects analysis
num.se ~ dbin(pi[1], num.pat)     # sampling distribution
pi[1] ~ dbeta(1, 1)               # prior distribution
rho ~ dnorm(m.rho, tau.rho)       # informative prior distribution
pi[2] <- rho * pi[1]              # probability scale
## Treatment of side effects analysis -  Markov Model
num.hosp ~ dbin(gamma.hosp, num.se)      # sampling distribution
gamma.hosp ~ dbeta(1, 1)                # prior distribution
num.dead ~ dbin(gamma.dead, num.se-num.hosp) # sampling distribution
gamma.dead ~ dbeta(1, 4)                     # prior distribution
# Probability of recovery
lambda.amb.rec.TH ~ dbeta(p1.amb.rec, p2.amb.rec)
lambda.hosp.rec.TH ~ dbeta(p1.hosp.rec, p2.hosp.rec)
# State transitions from Ambulatory Care
lambda.amb.amb <-(1-lambda.amb.rec.TH)*(1-lambda.amb.hosp)
lambda.amb.rec<-(1-lambda.amb.hosp)*lambda.amb.rec.TH
lambda.amb.hosp<-gamma.hosp/TH
# State transitions from Hospital
lambda.hosp.hosp<-(1-lambda.hosp.rec.TH)*(1-lambda.hosp.dead)
lambda.hosp.rec<-(1-lambda.hosp.dead)*lambda.hosp.rec.TH
lambda.hosp.dead<-gamma.dead/TH
## Costs
c.amb ~ dlnorm(m.amb, tau.amb)     # Cost of ambulatory care
c.hosp ~ dlnorm(m.hosp, tau.hosp)  # Cost of hospitalization
c.dead ~ dlnorm(m.dead, tau.dead)  # Cost of death
## Utility
e.chemo ~ dbeta(p1.chemo,p2.chemo) # Utility of undergoing chemotherapy
e.amb ~ dbeta(p1.amb,p2.amb)       # Utility of ambulatory care
e.hosp ~ dbeta(p1.hosp,p2.hosp)    # Utility of hospitalization
## Predictive distribution of # of patients with side effects
for (t in 1:2) {
SE[t] ~ dbin(pi[t], N)
}
}
# Generate the future data
pi <- prior.model$BUGSoutput$sims.list$pi
gamma.hosp <- prior.model$BUGSoutput$sims.list$gamma.hosp
gamma.dead <- prior.model$BUGSoutput$sims.list$gamma.dead
recover.amb <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.amb.rec.TH)
recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
# Simulate future data
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, X.SE1+X.SE2, gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- X.SE1 + X.SE2 - X.N.hosp
T.re.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.die
T.re.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.re.amb = T.re.amb,
N.hosp = N.hosp, T.re.hosp = T.re.hosp)
data.list.full[[i]] <- data.n
}
## For primary and secondary outcomes.
model.dat.full<-function(){
## Data
X.SE[1] ~ dbin(pi[1], n)
X.SE[2] ~ dbin(pi[2], n)
X.N.hosp ~ dbinom(gamma.hosp, X.SE[1]+X.SE[2])
X.N.dead ~ dbin(gamma.dead, X.N.hosp)
# Secondary Outcomes on Recovery
# Probability to rate
recover.amb <- -log(1-lambda.amb.rec.TH)
recover.hosp <- -log(1-lambda.hosp.rec.TH)
for(i in 1:N.amb){
T.rec.amb[i] ~ dexp(recover.amb)
}
for(i in 1:N.hosp){
T.rec.hosp[i] ~ dexp(recover.hosp)
}
##Priors
## Side effects analysis
num.se ~ dbin(pi[1], num.pat)     # sampling distribution
pi[1] ~ dbeta(1, 1)               # prior distribution
rho ~ dnorm(m.rho, tau.rho)       # informative prior distribution
pi[2] <- rho * pi[1]              # probability scale
## Treatment of side effects analysis -  Markov Model
num.hosp ~ dbin(gamma.hosp, num.se)      # sampling distribution
gamma.hosp ~ dbeta(1, 1)                # prior distribution
num.dead ~ dbin(gamma.dead, num.se-num.hosp) # sampling distribution
gamma.dead ~ dbeta(1, 4)                     # prior distribution
# Probability of recovery
lambda.amb.rec.TH ~ dbeta(p1.amb.rec, p2.amb.rec)
lambda.hosp.rec.TH ~ dbeta(p1.hosp.rec, p2.hosp.rec)
# State transitions from Ambulatory Care
lambda.amb.amb <-(1-lambda.amb.rec.TH)*(1-lambda.amb.hosp)
lambda.amb.rec<-(1-lambda.amb.hosp)*lambda.amb.rec.TH
lambda.amb.hosp<-gamma.hosp/TH
# State transitions from Hospital
lambda.hosp.hosp<-(1-lambda.hosp.rec.TH)*(1-lambda.hosp.dead)
lambda.hosp.rec<-(1-lambda.hosp.dead)*lambda.hosp.rec.TH
lambda.hosp.dead<-gamma.dead/TH
## Costs
c.amb ~ dlnorm(m.amb, tau.amb)     # Cost of ambulatory care
c.hosp ~ dlnorm(m.hosp, tau.hosp)  # Cost of hospitalization
c.dead ~ dlnorm(m.dead, tau.dead)  # Cost of death
## Utility
e.chemo ~ dbeta(p1.chemo,p2.chemo) # Utility of undergoing chemotherapy
e.amb ~ dbeta(p1.amb,p2.amb)       # Utility of ambulatory care
e.hosp ~ dbeta(p1.hosp,p2.hosp)    # Utility of hospitalization
## Predictive distribution of # of patients with side effects
for (t in 1:2) {
SE[t] ~ dbin(pi[t], N)
}
}
# Generate the future data
pi <- prior.model$BUGSoutput$sims.list$pi
gamma.hosp <- prior.model$BUGSoutput$sims.list$gamma.hosp
gamma.dead <- prior.model$BUGSoutput$sims.list$gamma.dead
recover.amb <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.amb.rec.TH)
recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
# Simulate future data
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, sum(X.SE), gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- X.SE1 + X.SE2 - X.N.hosp
T.re.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.die
T.re.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.re.amb = T.re.amb,
N.hosp = N.hosp, T.re.hosp = T.re.hosp)
data.list.full[[i]] <- data.n
}
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, sum(X.SE), gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- sum(X.SE) - X.N.hosp
T.re.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.die
T.re.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.re.amb = T.re.amb,
N.hosp = N.hosp, T.re.hosp = T.re.hosp)
data.list.full[[i]] <- data.n
}
## For primary and secondary outcomes.
model.dat.full<-function(){
## Data
X.SE[1] ~ dbin(pi[1], n)
X.SE[2] ~ dbin(pi[2], n)
X.N.hosp ~ dbinom(gamma.hosp, X.SE[1]+X.SE[2])
X.N.dead ~ dbin(gamma.dead, X.N.hosp)
# Secondary Outcomes on Recovery
# Probability to rate
recover.amb <- -log(1-lambda.amb.rec.TH)
recover.hosp <- -log(1-lambda.hosp.rec.TH)
for(i in 1:N.amb){
T.rec.amb[i] ~ dexp(recover.amb)
}
for(i in 1:N.hosp){
T.rec.hosp[i] ~ dexp(recover.hosp)
}
##Priors
## Side effects analysis
num.se ~ dbin(pi[1], num.pat)     # sampling distribution
pi[1] ~ dbeta(1, 1)               # prior distribution
rho ~ dnorm(m.rho, tau.rho)       # informative prior distribution
pi[2] <- rho * pi[1]              # probability scale
## Treatment of side effects analysis -  Markov Model
num.hosp ~ dbin(gamma.hosp, num.se)      # sampling distribution
gamma.hosp ~ dbeta(1, 1)                # prior distribution
num.dead ~ dbin(gamma.dead, num.se-num.hosp) # sampling distribution
gamma.dead ~ dbeta(1, 4)                     # prior distribution
# Probability of recovery
lambda.amb.rec.TH ~ dbeta(p1.amb.rec, p2.amb.rec)
lambda.hosp.rec.TH ~ dbeta(p1.hosp.rec, p2.hosp.rec)
# State transitions from Ambulatory Care
lambda.amb.amb <-(1-lambda.amb.rec.TH)*(1-lambda.amb.hosp)
lambda.amb.rec<-(1-lambda.amb.hosp)*lambda.amb.rec.TH
lambda.amb.hosp<-gamma.hosp/TH
# State transitions from Hospital
lambda.hosp.hosp<-(1-lambda.hosp.rec.TH)*(1-lambda.hosp.dead)
lambda.hosp.rec<-(1-lambda.hosp.dead)*lambda.hosp.rec.TH
lambda.hosp.dead<-gamma.dead/TH
## Costs
c.amb ~ dlnorm(m.amb, tau.amb)     # Cost of ambulatory care
c.hosp ~ dlnorm(m.hosp, tau.hosp)  # Cost of hospitalization
c.dead ~ dlnorm(m.dead, tau.dead)  # Cost of death
## Utility
e.chemo ~ dbeta(p1.chemo,p2.chemo) # Utility of undergoing chemotherapy
e.amb ~ dbeta(p1.amb,p2.amb)       # Utility of ambulatory care
e.hosp ~ dbeta(p1.hosp,p2.hosp)    # Utility of hospitalization
## Predictive distribution of # of patients with side effects
for (t in 1:2) {
SE[t] ~ dbin(pi[t], N)
}
}
# Generate the future data
pi <- prior.model$BUGSoutput$sims.list$pi
gamma.hosp <- prior.model$BUGSoutput$sims.list$gamma.hosp
gamma.dead <- prior.model$BUGSoutput$sims.list$gamma.dead
recover.amb <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.amb.rec.TH)
recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
# Simulate future data
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, sum(X.SE), gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- sum(X.SE) - X.N.hosp
T.re.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.dead
T.re.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.re.amb = T.re.amb,
N.hosp = N.hosp, T.re.hosp = T.re.hosp)
data.list.full[[i]] <- data.n
}
data.list.full
?comp.evsi.N
n
comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, updated = "jags", n.iter = 200, n.burnin = 100)
comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, update = "jags", n.iter = 200, n.burnin = 100)
## For primary and secondary outcomes.
model.dat.full<-function(){
## Data
X.SE[1] ~ dbin(pi[1], n)
X.SE[2] ~ dbin(pi[2], n)
X.N.hosp ~ dbinom(gamma.hosp, X.SE[1]+X.SE[2])
X.N.dead ~ dbin(gamma.dead, X.N.hosp)
# Secondary Outcomes on Recovery
# Probability to rate
recover.amb <- -log(1-lambda.amb.rec.TH)
recover.hosp <- -log(1-lambda.hosp.rec.TH)
for(i in 1:N.amb){
T.rec.amb[i] ~ dexp(recover.amb)
}
for(i in 1:N.hosp){
T.rec.hosp[i] ~ dexp(recover.hosp)
}
##Priors
## Side effects analysis
num.se ~ dbin(pi[1], num.pat)     # sampling distribution
pi[1] ~ dbeta(1, 1)               # prior distribution
rho ~ dnorm(m.rho, tau.rho)       # informative prior distribution
pi[2] <- rho * pi[1]              # probability scale
## Treatment of side effects analysis -  Markov Model
num.hosp ~ dbin(gamma.hosp, num.se)      # sampling distribution
gamma.hosp ~ dbeta(1, 1)                # prior distribution
num.dead ~ dbin(gamma.dead, num.se-num.hosp) # sampling distribution
gamma.dead ~ dbeta(1, 4)                     # prior distribution
# Probability of recovery
lambda.amb.rec.TH ~ dbeta(p1.amb.rec, p2.amb.rec)
lambda.hosp.rec.TH ~ dbeta(p1.hosp.rec, p2.hosp.rec)
# State transitions from Ambulatory Care
lambda.amb.amb <-(1-lambda.amb.rec.TH)*(1-lambda.amb.hosp)
lambda.amb.rec<-(1-lambda.amb.hosp)*lambda.amb.rec.TH
lambda.amb.hosp<-gamma.hosp/TH
# State transitions from Hospital
lambda.hosp.hosp<-(1-lambda.hosp.rec.TH)*(1-lambda.hosp.dead)
lambda.hosp.rec<-(1-lambda.hosp.dead)*lambda.hosp.rec.TH
lambda.hosp.dead<-gamma.dead/TH
## Costs
c.amb ~ dlnorm(m.amb, tau.amb)     # Cost of ambulatory care
c.hosp ~ dlnorm(m.hosp, tau.hosp)  # Cost of hospitalization
c.dead ~ dlnorm(m.dead, tau.dead)  # Cost of death
## Utility
e.chemo ~ dbeta(p1.chemo,p2.chemo) # Utility of undergoing chemotherapy
e.amb ~ dbeta(p1.amb,p2.amb)       # Utility of ambulatory care
e.hosp ~ dbeta(p1.hosp,p2.hosp)    # Utility of hospitalization
## Predictive distribution of # of patients with side effects
for (t in 1:2) {
SE[t] ~ dbin(pi[t], N)
}
}
R2OpenBUGS::write.model(model.dat.full,"~/modelFilefull.txt")
# Generate the future data
pi <- prior.model$BUGSoutput$sims.list$pi
gamma.hosp <- prior.model$BUGSoutput$sims.list$gamma.hosp
gamma.dead <- prior.model$BUGSoutput$sims.list$gamma.dead
recover.amb <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.amb.rec.TH)
recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
# Simulate future data
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, sum(X.SE), gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- sum(X.SE) - X.N.hosp
T.re.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.dead
T.re.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.re.amb = T.re.amb,
N.hosp = N.hosp, T.re.hosp = T.re.hosp)
data.list.full[[i]] <- data.n
}
comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, update = "jags", n.iter = 200, n.burnin = 100)
data
data.min<-append(data,list(n=150))
data.min
length(data.min)
data.min<-data.min[[-26]]
data.min<-data.min[[1:25]]
# Data for JAGS model
data <- list(num.pat=num.pat, num.se=num.se,
num.hosp=num.hosp, num.dead=num.dead,
p1.amb.rec=p1.amb.rec, p2.amb.rec=p2.amb.rec,
p1.hosp.rec=p1.hosp.rec, p2.hosp.rec=p2.hosp.rec,
m.rho=m.rho, tau.rho=tau.rho,
m.amb=m.amb, tau.amb=tau.amb,
m.hosp=m.hosp, tau.hosp=tau.hosp,
m.dead=m.dead, tau.dead=tau.dead,
N=N,
p1.chemo=p1.chemo, p2.chemo=p2.chemo,
p1.amb=p1.amb, p2.amb=p2.amb,
p1.hosp=p1.hosp, p2.hosp=p2.hosp,
TH=TH)
data.min<-data.min[[1:25]]
data.min<-append(data,list(n=150))
comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, update = "jags", n.iter = 200, n.burnin = 100)
warnings()
## For primary and secondary outcomes.
model.dat.full<-function(){
## Data
X.SE[1] ~ dbin(pi[1], n)
X.SE[2] ~ dbin(pi[2], n)
X.N.hosp ~ dbinom(gamma.hosp, X.SE[1]+X.SE[2])
X.N.dead ~ dbin(gamma.dead, X.N.hosp)
# Secondary Outcomes on Recovery
# Probability to rate
recover.amb <- -log(1-lambda.amb.rec.TH)
recover.hosp <- -log(1-lambda.hosp.rec.TH)
for(i in 1:N.amb){
T.rec.amb[i] ~ dexp(recover.amb)
}
for(i in 1:N.hosp){
T.rec.hosp[i] ~ dexp(recover.hosp)
}
##Priors
## Side effects analysis
num.se ~ dbin(pi[1], num.pat)     # sampling distribution
pi[1] ~ dbeta(1, 1)               # prior distribution
rho ~ dnorm(m.rho, tau.rho)       # informative prior distribution
pi[2] <- rho * pi[1]              # probability scale
## Treatment of side effects analysis -  Markov Model
num.hosp ~ dbin(gamma.hosp, num.se)      # sampling distribution
gamma.hosp ~ dbeta(1, 1)                # prior distribution
num.dead ~ dbin(gamma.dead, num.se-num.hosp) # sampling distribution
gamma.dead ~ dbeta(1, 4)                     # prior distribution
# Probability of recovery
lambda.amb.rec.TH ~ dbeta(p1.amb.rec, p2.amb.rec)
lambda.hosp.rec.TH ~ dbeta(p1.hosp.rec, p2.hosp.rec)
# State transitions from Ambulatory Care
lambda.amb.amb <-(1-lambda.amb.rec.TH)*(1-lambda.amb.hosp)
lambda.amb.rec<-(1-lambda.amb.hosp)*lambda.amb.rec.TH
lambda.amb.hosp<-gamma.hosp/TH
# State transitions from Hospital
lambda.hosp.hosp<-(1-lambda.hosp.rec.TH)*(1-lambda.hosp.dead)
lambda.hosp.rec<-(1-lambda.hosp.dead)*lambda.hosp.rec.TH
lambda.hosp.dead<-gamma.dead/TH
## Costs
c.amb ~ dlnorm(m.amb, tau.amb)     # Cost of ambulatory care
c.hosp ~ dlnorm(m.hosp, tau.hosp)  # Cost of hospitalization
c.dead ~ dlnorm(m.dead, tau.dead)  # Cost of death
## Utility
e.chemo ~ dbeta(p1.chemo,p2.chemo) # Utility of undergoing chemotherapy
e.amb ~ dbeta(p1.amb,p2.amb)       # Utility of ambulatory care
e.hosp ~ dbeta(p1.hosp,p2.hosp)    # Utility of hospitalization
## Predictive distribution of # of patients with side effects
for (t in 1:2) {
SE[t] ~ dbin(pi[t], N)
}
}
R2OpenBUGS::write.model(model.dat.full,"~/modelFilefull.txt")
# Generate the future data
pi <- prior.model$BUGSoutput$sims.list$pi
gamma.hosp <- prior.model$BUGSoutput$sims.list$gamma.hosp
gamma.dead <- prior.model$BUGSoutput$sims.list$gamma.dead
recover.amb <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.amb.rec.TH)
recover.hosp <- -log(1 - prior.model$BUGSoutput$sims.list$lambda.hosp.rec.TH)
# Number of future datasets
Q <- 50
probabilities <- (1 : Q) / (Q + 1)
# Quantiles for the variables
set.seed(12)
pi.q <- apply(pi, 2, quantile, probs = sample(probabilities))
gamma.hosp.q <- quantile(gamma.hosp, probs = sample(probabilities))
gamma.dead.q <- quantile(gamma.dead, probs = sample(probabilities))
recover.amb.q <- quantile(recover.amb, probs = sample(probabilities))
recover.hosp.q <- quantile(recover.hosp, probs = sample(probabilities))
# Simulate future data
n <- trunc(seq(sqrt(5), sqrt(1000), length.out = 50)^2)
data.list.full <- list()
for(i in 1:Q){
# Number of patients with side effects
X.SE <- rbinom(2, n[i], pi.q[i,])
# Number in hospital and who die
X.N.hosp <- rbinom(1, sum(X.SE), gamma.hosp.q[i])
X.N.dead <- rbinom(1, X.N.hosp, gamma.dead.q[i])
# Recovery time for patients with different care
N.amb <- sum(X.SE) - X.N.hosp
T.rec.amb <- rexp(N.amb, recover.amb.q[i])
N.hosp <- X.N.hosp - X.N.dead
T.rec.hosp <- rexp(N.hosp, recover.hosp.q[i])
data.n <- list(X.SE = X.SE,
X.N.hosp = X.N.hosp, X.N.dead = X.N.dead,
N.amb = N.amb, T.rec.amb = T.rec.amb,
N.hosp = N.hosp, T.rec.hosp = T.rec.hosp)
data.list.full[[i]] <- data.n
}
comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, update = "jags", n.iter = 200, n.burnin = 100)
beta.comp<-comp.evsi.N("~/modelFilefull.txt",data.list.full,"n",n,effects = effects, costs = costs, he = mod, evi = evppi.full,
Q = 50, data.stats = data, update = "jags", n.iter = 200, n.burnin = 100)
EVSI.full<-evsi.calc(beta.comp)
launch.App(EVSI.full)
